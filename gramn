#!/usr/bin/env python3
import requests
import sys
from pathlib import Path
import json
from html.parser import HTMLParser
import re
from dotenv import load_dotenv
import os

load_dotenv()
saplin = os.getenv('SAPLIN_KEY')

class TextExtractor(HTMLParser):
  def __init__(self):
    super().__init__()
    self.text = []
    self.alt_values = []
  def handle_data(self, data):
    data = ''.join(c for c in data if c.isprintable() or c.isspace())
    cleaned_data = re.sub(r'\s+', ' ', data).strip()
    if cleaned_data:
      self.text.append(cleaned_data)
  def handle_starttag(self, tag, attrs):
    if tag == 'img':
      for attr, value in attrs:
        if attr == 'alt' and value.strip():
          self.alt_values.append(value.strip())

def extract_text_and_alt_tags(html_content):
  parser = TextExtractor()
  parser.feed(html_content)
  text = ' '.join(parser.text)
  text += ' ||| ' + ' '.join(parser.alt_values)
  return text

def api_call(data):
  try:
    response = requests.post(
      "https://api.sapling.ai/api/v1/edits",
      json = data
    )
    resp_json = response.json()
    if 200 <= response.status_code < 300:
      return resp_json['edits']
    else:
      print("Error: ", resp_json)
  except Exception as e:
    print("Error: ", e)

def prepare(content = ''):
  data = {
    "key": saplin,
    "text": content,
    "session_id": "saplin:gramn"
  }
  return data

def report_errors(response):
  for e in response:
    print(e)
# Take from here!

if __name__ == "__main__":
  if len(sys.argv) != 2:
    print('Missing file argument.')
    sys.exit(1)
  file = sys.argv[1]
  raw_content = Path(file).read_text()
  content = extract_text_and_alt_tags(raw_content)
  up = prepare(content)
  dn = api_call(up)
  errors = report_errors(dn)
